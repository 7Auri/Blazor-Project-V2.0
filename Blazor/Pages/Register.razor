@page "/register"
@layout RegisterLayout
@inject IHttpClientFactory ClientFactory
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http.Json
@using Newtonsoft.Json.Linq
@using Entities.Concrete.DTOs
@inject IJSRuntime js
@inject NavigationManager navigation
@inject ProtectedLocalStorage Storage
@inject Data data

<div class="card">
    <div class="card-body my-2">
        <h3>Register</h3>
        <hr />
        <EditForm Model="@model" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="pw">First Name</label>
                <InputText @bind-Value="model.FirstName" class="form-control" id="pw" />
                <ValidationMessage For="()=>model.FirstName" />
            </div>
            <div class="form-group">
                <label for="pw">Last Name</label>
                <InputText @bind-Value="model.LastName" class="form-control" id="pw" />
                <ValidationMessage For="()=>model.LastName" />
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <InputText @bind-Value="model.Email" class="form-control" id="email" />
                <ValidationMessage For="()=>model.Email" />
            </div>
            <div class="form-group">
                <label for="pw">Password</label>
                <InputText @bind-Value="model.Password" class="form-control" id="pw" />
                <ValidationMessage For="()=>model.Password" />
            </div>

            @if (IsSubmit)
            {
                <button class="btn btn-primary btn-block" type="button" disabled>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="sr-only">Loading...</span>
                </button> }
            else
            {
                <button class="btn btn-primary btn-block">Register</button>}
        </EditForm>
    </div>
</div>

@code {
    private bool IsSubmit = false;
    private bool ShowErrors;
    private string Error = "";
    public UserForRegisterDto model = new();
    private async Task Submit()
    {
        ShowErrors = false;

        var client = ClientFactory.CreateClient();

        var response = await client.PostAsJsonAsync("http://localhost:5000/api/Auth/register", model);



        if (response.IsSuccessStatusCode)
        {
            string result = await response.Content.ReadAsStringAsync();
            JObject resultObject = JObject.Parse(result);
            string token = resultObject.SelectToken("data").SelectToken("accessToken").Value<string>();
            await Storage.SetAsync("data", token);
            data.IsLoggedIn = true;
            navigation.NavigateTo("login");
            await base.OnInitializedAsync();
        }
        else
        {
            string result = await response.Content.ReadAsStringAsync();
            JObject resultObject = JObject.Parse(result);
        }
    }



}